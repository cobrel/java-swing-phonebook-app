/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intGrafica;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.time.MonthDay;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author cristian
 */
public class Agenda extends javax.swing.JFrame {

    /**
     * Creates new form Agenda
     */
    public Agenda() {
        initComponents();
        jTable_display.setAutoCreateRowSorter(true);
        try {
            show_user();
        } catch (ParseException ex) {
            Logger.getLogger(Agenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        filtrare_combo.setModel(new DefaultComboBoxModel<>(new String[]{"Select", "Telefon_Fix", "Telefon_Mobil", "Birthday", "Upcoming_Birthdays", "Personalizata"}
        ));
        Ordonare_combo.setModel(new DefaultComboBoxModel<>(new String[]{"Select", "ID", "Nume", "Prenume", "Data_nasterii", "Numar_de_telefon", "Tip_telefon"}
        ));
    }

    public ArrayList<User> userList() {
        ArrayList<User> usersList = new ArrayList<>();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = st.executeQuery("SELECT * FROM agendajava");
            User user;
            while (rs.next()) {
                user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                usersList.add(user);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return usersList;
    }

    public void show_user() throws ParseException {
        ArrayList<User> list = userList();
        DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
        Object[] linie = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            linie[0] = list.get(i).getID();
            linie[1] = list.get(i).getNume();
            linie[2] = list.get(i).getPrenume();
            linie[3] = list.get(i).getData_nasterii();
            linie[4] = list.get(i).getNumar_de_telefon();
            linie[5] = list.get(i).getTip_telefon();
            model.addRow(linie);
        }
    }

    private void filter(String sql) {
        DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        jTable_display.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + sql));

    }

    public String getBirthday() {
        MonthDay md = MonthDay.now();
        String res = md.format(DateTimeFormatter.ofPattern("MM-dd"));
        return res;
    }

    public String luna() {
        YearMonth ym = YearMonth.now();
        String les = ym.format(DateTimeFormatter.ofPattern("M"));
        return les;
    }

    public String zi() {
        MonthDay zi = MonthDay.now();
        String bre = zi.format(DateTimeFormatter.ofPattern("dd"));
        return bre;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        button_filtru = new javax.swing.JButton();
        button_ordonare = new javax.swing.JButton();
        buton_stergere = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        filtrare_combo = new javax.swing.JComboBox<>();
        Ordonare_combo = new javax.swing.JComboBox<>();
        casuta_filtru = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_display = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        salvare = new javax.swing.JMenuItem();
        iesire = new javax.swing.JMenuItem();
        despre = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Filtrare : ");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Ordonare : ");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("Filtru : ");

        button_filtru.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        button_filtru.setForeground(new java.awt.Color(0, 102, 102));
        button_filtru.setText("Filtreaza");
        button_filtru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_filtruActionPerformed(evt);
            }
        });

        button_ordonare.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        button_ordonare.setForeground(new java.awt.Color(0, 102, 102));
        button_ordonare.setText("Ordoneaza");
        button_ordonare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ordonareActionPerformed(evt);
            }
        });

        buton_stergere.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        buton_stergere.setForeground(new java.awt.Color(0, 102, 102));
        buton_stergere.setText("Sterge contact selectat");
        buton_stergere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_stergereActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 102, 102));
        jButton8.setText("Editeaza contacte");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(0, 102, 102));
        jButton9.setText("Adauga contact");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        filtrare_combo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filtrare_comboItemStateChanged(evt);
            }
        });

        casuta_filtru.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        casuta_filtru.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 1, true));

        jTable_display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nume", "Prenume", "Data_nasterii", "Numar_de_telefon", "Tip_telefon"
            }
        ));
        jScrollPane1.setViewportView(jTable_display);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(filtrare_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5)
                                        .addGap(4, 4, 4)
                                        .addComponent(casuta_filtru, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Ordonare_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(button_filtru, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(button_ordonare, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buton_stergere, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(14, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(casuta_filtru, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel5)
                        .addComponent(filtrare_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button_filtru)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ordonare_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_ordonare)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buton_stergere, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu3.setText("Fisiere");

        salvare.setText("Salvare");
        salvare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvareActionPerformed(evt);
            }
        });
        jMenu3.add(salvare);

        iesire.setText("Iesire");
        iesire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iesireActionPerformed(evt);
            }
        });
        jMenu3.add(iesire);

        jMenuBar2.add(jMenu3);

        despre.setText("Ajutor");

        jMenuItem4.setText("Despre");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        despre.add(jMenuItem4);

        jMenuBar2.add(despre);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void iesireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iesireActionPerformed
        int raspuns = JOptionPane.showConfirmDialog(this, "Doriti sa parasiti aplicatia?", "Exit application", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (raspuns == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_iesireActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JOptionPane.showMessageDialog(this, " Agenda Telefonica \n clasa 5 martie 2019 \n Marius-Cristian Neagu \n cristian.neagu@hotmail.com ", "Despre", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void buton_stergereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_stergereActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
            int linie = jTable_display.getSelectedRow();
            String value = (jTable_display.getModel().getValueAt(linie, 0).toString());
            int intrebare = JOptionPane.showConfirmDialog(this, "Doriti sa sa stergeti contactul?", "Stergere contact", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (intrebare == JOptionPane.YES_OPTION) {
                String query = "DELETE FROM agendajava where ID=" + value;
                PreparedStatement pst = con.prepareStatement(query);
                pst.executeUpdate();
            }

            DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
            model.setRowCount(0);
            show_user();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_buton_stergereActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        adaugare_contact ad = new adaugare_contact();
        ad.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        editare_contact ed = new editare_contact();
        ed.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void button_filtruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_filtruActionPerformed
        String filtrare = filtrare_combo.getSelectedItem().toString();
        if (filtrare.equals("Personalizata")) {
            String txt = casuta_filtru.getText();
            filter(txt);
        }

    }//GEN-LAST:event_button_filtruActionPerformed

    private void button_ordonareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ordonareActionPerformed
        String ordonare = Ordonare_combo.getSelectedItem().toString();
        try {
            if (ordonare.equals("Select")) {

                // SELECT * FROM agendajava;
                String selectAll = "SELECT * FROM agendajava";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (ordonare.equals("ID")) {

                // SELECT * FROM agendajava ORDER BY ID ASC;
                String selectAll = "SELECT * FROM agendajava ORDER BY ID ASC";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (ordonare.equals("Nume")) {

                // SELECT * FROM agendajava ORDER BY Nume ASC;
                String selectAll = "SELECT * FROM agendajava ORDER BY Nume ASC";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (ordonare.equals("Prenume")) {

                // SELECT * FROM agendajava ORDER BY Prenume ASC;
                String selectAll = "SELECT * FROM agendajava ORDER BY Prenume ASC";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (ordonare.equals("Data_nasterii")) {

                // SELECT * FROM agendajava ORDER BY Data_nasterii ASC;
                String selectAll = "SELECT * FROM agendajava ORDER BY Data_nasterii ASC";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (ordonare.equals("Numar_de_telefon")) {

                // SELECT * FROM agendajava ORDER BY Numar_de_telefon ASC;
                String selectAll = "SELECT * FROM agendajava ORDER BY Numar_de_telefon ASC";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (ordonare.equals("Tip_telefon")) {

                // SELECT * FROM agendajava ORDER BY Tip_telefon ASC;
                String selectAll = "SELECT * FROM agendajava ORDER BY Tip_telefon ASC";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_button_ordonareActionPerformed

    private void salvareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvareActionPerformed
        JFileChooser fc = new JFileChooser();
        int option = fc.showOpenDialog(Agenda.this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File fileSave = fc.getSelectedFile();
            try {
                FileWriter fw = new FileWriter(fileSave);
                BufferedWriter bw = new BufferedWriter(fw);
                for (int linie = 0; linie < jTable_display.getRowCount(); linie++) {
                    for (int col = 0; col < jTable_display.getColumnCount(); col++) {
                        bw.write(jTable_display.getValueAt(linie, col).toString() + ",");
                    }
                    bw.newLine();
                }
                bw.close();
                fw.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_salvareActionPerformed

    private void filtrare_comboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtrare_comboItemStateChanged
        String filtrare = filtrare_combo.getSelectedItem().toString();
        try {
            if (filtrare.equals("Select")) {

                // SELECT * FROM agendajava;
                String selectAll = "SELECT * FROM agendajava";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectAll);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (filtrare.equals("Telefon_Fix")) {
                // SELECT * FROM agendajava WHERE Tip_telefon = 'Fix';
                String selectFix = "SELECT * FROM agendajava WHERE Tip_telefon LIKE '%Fix%'";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectFix);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

            if (filtrare.equals("Telefon_Mobil")) {
                // SELECT * FROM agendajava WHERE Tip_telefon = 'Mobil';
                String selectMobil = "SELECT * FROM agendajava WHERE Tip_telefon LIKE '%Mobil%'";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectMobil);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }
            if (filtrare.equals("Birthday")) {
                // SELECT * FROM agendajava WHERE Data_nasterii = CURDATE();
                String selectBirthday = "SELECT * FROM agendajava WHERE Data_nasterii like '%" + getBirthday() + "%'";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectBirthday);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }
            if (filtrare.equals("Upcoming_Birthdays")) {
                // SELECT * FROM agendajava WHERE Data_nasterii = CURDATE();
                String selectMissed = "SELECT * FROM agendajava WHERE MONTH(Data_nasterii) =" + luna()+" AND DAY(Data_nasterii) >" + zi() + "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_app?user=test&password=test&useLegacyDatetimeCOde=false&serverTimezone=UTC");
                Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = st.executeQuery(selectMissed);
                DefaultTableModel dm = (DefaultTableModel) jTable_display.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                ArrayList<User> usersList = new ArrayList<>();
                User user;
                while (rs.next()) {
                    user = new User(rs.getInt("ID"), rs.getString("Nume"), rs.getString("Prenume"), rs.getString("Data_nasterii"), rs.getString("Numar_de_telefon"), rs.getString("Tip_telefon"));
                    usersList.add(user);
                }
                ArrayList<User> list = usersList;
                DefaultTableModel model = (DefaultTableModel) jTable_display.getModel();
                Object[] linie = new Object[6];
                for (int i = 0; i < list.size(); i++) {
                    linie[0] = list.get(i).getID();
                    linie[1] = list.get(i).getNume();
                    linie[2] = list.get(i).getPrenume();
                    linie[3] = list.get(i).getData_nasterii();
                    linie[4] = list.get(i).getNumar_de_telefon();
                    linie[5] = list.get(i).getTip_telefon();
                    model.addRow(linie);
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_filtrare_comboItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agenda.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agenda.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agenda.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agenda.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agenda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Ordonare_combo;
    private javax.swing.JButton buton_stergere;
    private javax.swing.JButton button_filtru;
    private javax.swing.JButton button_ordonare;
    private javax.swing.JTextField casuta_filtru;
    private javax.swing.JMenu despre;
    private javax.swing.JComboBox<String> filtrare_combo;
    private javax.swing.JMenuItem iesire;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_display;
    private javax.swing.JMenuItem salvare;
    // End of variables declaration//GEN-END:variables
}
